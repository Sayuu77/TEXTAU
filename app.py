# app.py
import streamlit as st
import os
import time
import glob
import base64
import io
import random
import urllib.request
from gtts import gTTS
from PIL import Image

# -------------------- CONFIG --------------------
st.set_page_config(page_title=, page_icon="üåå", layout="centered")

# -------------------- STYLE (Neo-Glass nocturno) --------------------
st.markdown("""
    <style>
    body {
      background: linear-gradient(180deg, rgba(8,6,23,0.94), rgba(18,10,40,0.96));
      color: #EAEAF6;
      font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    .stApp > .main {
      background: rgba(255,255,255,0.03);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      border: 1px solid rgba(255,255,255,0.04);
      box-shadow: 0 10px 30px rgba(1,4,20,0.6);
      border-radius: 14px;
      padding: 24px;
    }
    .header { display:flex; align-items:center; gap:16px; }
    .glass-btn {
      background: linear-gradient(90deg, rgba(140,100,255,0.14), rgba(90,130,255,0.10));
      color: #F6F7FF;
      border: 1px solid rgba(255,255,255,0.06);
      padding: 8px 14px;
      border-radius: 10px;
      cursor: pointer;
      font-weight: 600;
    }
    textarea { background: rgba(255,255,255,0.02); color: #F1F1FF; }
    .small-note { color: #cfcff6; font-size: 13px; }
    a { color: #C7B3FF; }
    .muted { color: #bfbfe6 }
    </style>
""", unsafe_allow_html=True)

# -------------------- BACKGROUND OVERLAY (optional clouds) --------------------
if os.path.exists("images/clouds.png"):
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url('images/clouds.png');
            background-size: cover;
            background-attachment: fixed;
            background-blend-mode: overlay;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

# -------------------- HEADER --------------------
col1, col2 = st.columns([1,4])
with col1:
    if os.path.exists("portada.png"):
        try:
            port = Image.open("portada.png")
            st.image(port, width=110)
        except Exception:
            pass
with col2:
    st.markdown("<div class='header'><h1 style='margin:0'>üåå Cuentos & Audio (ES)</h1></div>", unsafe_allow_html=True)
    st.markdown("<div class='small-note'>Neo-Glass ‚Ä¢ M√∫sica en loop ‚Ä¢ Cuentos en espa√±ol</div>", unsafe_allow_html=True)

st.markdown("---")

# -------------------- M√öSICA AUTOPLAY (muted -> fade-in) --------------------
# Coloca 'music.mp3' en la carpeta del proyecto para activar m√∫sica.
if os.path.exists("music.mp3"):
    audio_html = """
    <audio id="bg_audio" autoplay loop muted>
      <source src="music.mp3" type="audio/mpeg">
    </audio>
    <script>
      (function() {
        const a = document.getElementById('bg_audio');
        if (!a) return;
        a.volume = 0.0;
        setTimeout(() => {
          try {
            a.muted = false;
            let vol = 0.0;
            const target = 0.14;
            const step = 0.02;
            const interval = setInterval(() => {
              vol = Math.min(vol + step, target);
              a.volume = vol;
              if (vol >= target) clearInterval(interval);
            }, 100);
          } catch (e) {
            console.log('Autoplay unmute blocked', e);
          }
        }, 600);
      })();
    </script>
    """
    st.markdown(audio_html, unsafe_allow_html=True)
    try:
        with open("music.mp3", "rb") as mf:
            st.audio(mf.read(), format="audio/mp3", start_time=0)
    except Exception:
        st.info("M√∫sica encontrada, pero no se pudo cargar el control nativo.")
else:
    st.info("Para activar m√∫sica de fondo autom√°tica: coloca un archivo `music.mp3` en la carpeta del proyecto.")

st.markdown("---")

# -------------------- FUENTES P√öBLICAS EN ESPA√ëOL (ejemplos) --------------------
# Intentamos obtener cuentos en espa√±ol desde fuentes p√∫blicas en espa√±ol.
# Si la descarga falla, usamos cuentos originales en espa√±ol (limpios y cortos).
# Las URLs pueden ser actualizadas por ti; muchas bibliotecas digitales tienen textos de dominio p√∫blico.
SPANISH_STORY_URLS = [
    # Ejemplos de textos en espa√±ol en dominio p√∫blico (puedes a√±adir m√°s URLs v√°lidas).
    # NOTA: Algunas URLs pueden requerir adaptaci√≥n o fallar seg√∫n respuesta del servidor.
    "https://www.gutenberg.org/cache/epub/2000/pg2000.txt",  # ejemplo (puede ser en ingl√©s) - se intentar√° limpiar y si no est√° en espa√±ol usamos fallback
    # Puedes agregar otras fuentes p√∫blicas en espa√±ol aqu√≠.
]

# -------------------- HISTORIAS ORIGINALES (fallback / preferidas) --------------------
# Lista de cuentos breves originales en espa√±ol (limpios, directos)
ORIGINAL_SPANISH_STORIES = [
    # 1
    "La luna rompi√≥ el silencio de la plaza. Ana camin√≥ sin prisa, sosteniendo un peque√±o papel con una direcci√≥n que ya no recordaba. Al llegar, encontr√≥ la casa con las luces a√∫n encendidas. All√≠, una voz antigua la reconoci√≥ por su risa. Fue suficiente para que entendiera: a veces, volver no borra lo pasado, lo transforma en compa√±√≠a.",
    # 2
    "El r√≠o guardaba secretos; Pedro se sent√≥ a la orilla y dej√≥ que el agua le devolviera recuerdos ligeros. Sonri√≥ al pensar que no todo lo que perdemos se va: algunas cosas solo cambian de bolsillo y vuelven como historias.",
    # 3
    "En un pueblo donde todas las puertas eran iguales, Clara encontr√≥ una con una marca diminuta. Al cruzarla, descubri√≥ un jard√≠n donde las palabras brotaban en flores. Aprendi√≥ a cultivar silencios y a hablar solo cuando la tierra estaba lista.",
    # 4
    "El faro ya no alumbraba barcos, pero segu√≠a encendido por costumbre. Mart√≠n subi√≥ sus escaleras y, desde arriba, prometi√≥ escribir una carta a su propio futuro: la √∫nica persona que deb√≠a leerla era la que a√∫n no exist√≠a.",
    # 5
    "Una ni√±a vend√≠a luci√©rnagas en frascos. No por maldad, sino por memoria: quer√≠a que la noche guardara peque√±as luces que nadie pudiera apagar. Quien compr√≥ un frasco, volvi√≥ a creer en rutas inesperadas."
]

# -------------------- UTIL: LIMPIAR TEXTO OBTENIDO --------------------
def clean_fetched_text(raw):
    """
    Intenta eliminar cabeceras, pies y metadatos comunes (Gutenberg y similares),
    y devuelve un bloque de texto en espa√±ol (o cercano) sin pr√≥logos/√≠ndices.
    """
    try:
        # Quitar headers tipo Gutenberg
        if '*** START' in raw:
            raw = raw.split('*** START', 1)[-1]
        if '*** END' in raw:
            raw = raw.split('*** END', 1)[0]
        # Quitar secuencias largas de may√∫sculas (√≠ndices) iniciales
        # Tomar una ventana inicial razonable y buscar primer p√°rrafo largo
        raw = raw.strip()
        # Reemplazar m√∫ltiples saltos de l√≠nea por doble salto
        raw = "\n\n".join([p.strip() for p in raw.splitlines() if p.strip() != ""])
        # Buscar segmentos en espa√±ol (heur√≠stica: presencia de art√≠culos en espa√±ol)
        spanish_indicators = [' la ', ' el ', ' que ', ' de ', ' y ', ' los ', ' las ', ' un ', ' una ']
        # Si no parece espa√±ol, devolvemos None para fallback
        lowered = raw.lower()
        if not any(ind in lowered for ind in spanish_indicators):
            return None
        # Tomar hasta 2000 caracteres terminando en final de p√°rrafo
        max_chars = 2000
        if len(raw) <= max_chars:
            return raw
        # intentar cortar en un parrafo entero
        cut = raw[:max_chars]
        # expandir hasta el siguiente doble salto de linea
        next_break = raw.find('\n\n', max_chars - 200, max_chars + 500)
        if next_break != -1 and next_break < max_chars + 600:
            cut = raw[:next_break]
        return cut.strip()
    except Exception:
        return None

# -------------------- OBTENER CUENTO ALEATORIO (intento internet -> fallback original) --------------------
def fetch_random_spanish_story():
    # Intentar cada URL hasta que alguna devuelva texto en espa√±ol
    random.shuffle(SPANISH_STORY_URLS)
    for url in SPANISH_STORY_URLS:
        try:
            with urllib.request.urlopen(url, timeout=12) as r:
                raw = r.read().decode('utf-8', errors='ignore')
            cleaned = clean_fetched_text(raw)
            if cleaned:
                return cleaned, url
        except Exception:
            continue
    # Si no se obtuvo nada, devolvemos un cuento original aleatorio
    return random.choice(ORIGINAL_SPANISH_STORIES), "interno:historia_original"

# -------------------- UI: Cuento aleatorio --------------------
st.markdown("## üìö Cuento aleatorio en espa√±ol")
st.write("Pulsa **Obtener cuento aleatorio** para traer una historia breve y directa (sin pr√≥logos ni √≠ndices).")

if st.button("üì• Obtener cuento aleatorio (ES)"):
    story_text, source = fetch_random_spanish_story()
    st.session_state['last_story'] = story_text
    st.session_state['last_story_source'] = source
    st.markdown("### ‚ú® Cuento obtenido")
    st.write(story_text)

# Mostrar √∫ltimo cuento si existe
if 'last_story' in st.session_state:
    st.markdown("### ‚ú® √öltimo cuento obtenido")
    st.write(st.session_state['last_story'])
    st.markdown(f"*Fuente:* <span class='muted'>{st.session_state.get('last_story_source','')}</span>", unsafe_allow_html=True)

st.markdown("---")

# -------------------- TTS / CONVERSI√ìN --------------------
def ensure_temp():
    os.makedirs("temp", exist_ok=True)

def text_to_mp3_bytes(text, lang='es'):
    ensure_temp()
    safe = "".join(c for c in text[:30] if c.isalnum() or c in (" ", "_")).strip().replace(" ", "_")
    if not safe:
        safe = "audio"
    filename = f"{safe}_{int(time.time())}.mp3"
    path = os.path.join("temp", filename)
    # Generar con gTTS
    tts = gTTS(text, lang=lang)
    tts.save(path)
    with open(path, "rb") as f:
        data = f.read()
    return path, data

def download_link_bytes(bytes_data, filename="audio.mp3", label="üì• Descargar audio"):
    b64 = base64.b64encode(bytes_data).decode()
    href = f'<a href="data:audio/mp3;base64,{b64}" download="{filename}">{label}</a>'
    return href

# -------------------- Convertir cuento obtenido --------------------
st.markdown("## üîä Convertir cuento obtenido a audio")
st.write("Si ya obtuviste un cuento arriba, puedes convertirlo a audio en espa√±ol.")

if st.button("üîÅ Convertir cuento obtenido a audio"):
    if 'last_story' not in st.session_state:
        st.warning("Primero pulsa 'Obtener cuento aleatorio'.")
    else:
        try:
            path, data = text_to_mp3_bytes(st.session_state['last_story'], lang='es')
            st.success("Audio del cuento generado ‚úÖ")
            st.audio(data, format="audio/mp3")
            st.markdown(download_link_bytes(data, filename=os.path.basename(path), label="üì• Descargar audio del cuento"), unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error al generar audio: {e}")

st.markdown("---")

# -------------------- Convertir texto propio --------------------
st.markdown("## ‚úçÔ∏è Pega tu propio texto (en espa√±ol)")
user_text = st.text_area("Tu texto aqu√≠ (puedes pegar un cuento o cualquier texto en espa√±ol)", height=220)
lang_choice2 = st.selectbox("Idioma para el audio (texto propio):", ("Espa√±ol", "English"), key="lang_text")
if st.button("üîä Convertir texto a audio"):
    if not user_text.strip():
        st.warning("Por favor pega o escribe alg√∫n texto.")
    else:
        lg2 = 'es' if lang_choice2 == "Espa√±ol" else 'en'
        try:
            path2, data2 = text_to_mp3_bytes(user_text, lang=lg2)
            st.success("Audio generado ‚úÖ")
            st.audio(data2, format="audio/mp3")
            st.markdown(download_link_bytes(data2, filename=os.path.basename(path2), label="üì• Descargar tu audio"), unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error al generar audio: {e}")

st.markdown("---")

# -------------------- LIMPIEZA TEMP --------------------
def cleanup_temp(days=7):
    files = glob.glob("temp/*.mp3")
    now = time.time()
    cutoff = now - days * 86400
    for f in files:
        try:
            if os.path.getmtime(f) < cutoff:
                os.remove(f)
        except Exception:
            pass

cleanup_temp(7)

# -------------------- FOOTER --------------------
st.caption("Historias en espa√±ol ‚Äî limpias y directas. Si quieres m√°s fuentes p√∫blicas en espa√±ol, puedo a√±adirlas.")
st.caption("gTTS usa conexi√≥n a internet para generar audio. Nada de la interfaz est√° en ingl√©s, excepto la opci√≥n de idioma para convertir el texto si as√≠ lo deseas.")
